const Scene = require('telegraf/scenes/base');
const meny = require('../buttons/meny');
const fs = require('fs');
const path = require('path');
const PostModel = require('../../db/models/post.model');
const newPost = new Scene('New_Post');

newPost.hears('üîô', async (ctx) => {
  try {
    await ctx.reply('–ú–µ–Ω—é', meny());
    console.log(ctx.session.photo);
    await ctx.scene.leave();
  } catch (error) {
    console.log(error);
  }
});
newPost.enter((ctx) => {
  // console.log(ctx.state);
});
newPost.on('message', async (ctx) => {
  console.log(ctx.state);
  if (!ctx.session.photo) {
    try {
      ctx.reply('–ñ–¥–∏—Ç–µ');
      const photo = ctx.message.document;
      const fileId = photo.file_id;
      const file = await ctx.telegram.getFile(fileId);
      const fileUrl = `https://api.telegram.org/file/${process.env.TOKEN}/${file.file_path}`;
      const uniqueFilename = `${Date.now()}_${file.file_path.split('/').pop()}`;
      const savePath = path.join(
        __dirname,
        '../../assets/images/post_images/' + uniqueFilename
      );
      const response = await fetch(fileUrl);
      console.log(response);
      const buffer = await response.arrayBuffer();
      fs.writeFileSync(savePath, Buffer.from(buffer));
      ctx.reply(
        '‚úÖ–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\nüñä–ü–∏—à–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏—è,—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞'
      );
      ctx.session.photo = uniqueFilename;
    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
    }
  } else {
    try {
      const text = ctx.message.text.split('~');
      if (text.length !== 2 || !ctx.session.photo)
        return ctx.reply('–æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—Ä—É');
      const postModel = await PostModel.create({
        name: text[0],
        photo: ctx.session.photo,
        text: text[1],
      });
      ctx.session.photo = false;

      ctx.reply('‚úÖ–ü–æ—Å—Ç –î–æ–±–∞–≤–ª–µ–Ω!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ');
    } catch (error) {
      console.log(error);
    }
  }
});

const dellPost = new Scene('Dell_Post');
dellPost.hears('üîô', async (ctx) => {
  try {
    await ctx.reply('–ú–µ–Ω—é', meny());
    await ctx.scene.leave();
  } catch (error) {
    console.log(error);
  }
});
dellPost.enter((ctx) => ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID'));
dellPost.on('message', async (ctx) => {
  try {
    const IdToDelete = +ctx.message.text;
    if (isNaN(IdToDelete)) return ctx.reply('ID –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    const deletedRows = await PostModel.destroy({
      where: {
        id: IdToDelete,
      },
    });

    if (deletedRows === 1) {
      ctx.reply(`–ó–∞–ø–∏—Å—å —Å id ${IdToDelete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`);
    } else {
      ctx.reply(`–ó–∞–ø–∏—Å—å —Å id ${IdToDelete} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }
  } catch (error) {
    console.log(error);
  }
});
module.exports = [newPost, dellPost];
